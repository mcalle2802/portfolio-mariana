---
import "../../styles/global.css";
import Navbar from "../../components/Navbar.astro";
import Footer from "../../components/Footer.astro";
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Differential Drive Robot ‚Äî Mariana Calle</title>
  </head>

  <body>
    <Navbar />

    <main class="project-page">
      <section class="project-hero">
        <img src="/projects/car.jpeg" alt="Differential Drive Robot" class="hero-img" />
        <div class="overlay">
          <h1>Differential Drive Mobile Robot</h1>
          <p>From CAD to ROS2 simulation ‚Äî designing, assembling, and controlling a differential robot.</p>
        </div>
      </section>

      <section class="project-content">
        <h2>Project Overview</h2>
        <p>
          This project involved the complete design and implementation of a
          <strong>differential drive mobile robot</strong> developed for educational and
          research applications in mobile robotics. The robot integrates mechanical,
          electronic, and software components to achieve autonomous movement between
          predefined waypoints.
        </p>

        <h2>Mechanical Design</h2>
        <p>
          The mechanical structure was modeled in <strong>Solid Edge Siemens</strong>,
          where a compact and robust chassis was designed to hold all the electronic components.
          Custom supports were created for the <em>Raspberry Pi Pico</em>,
          <em>motor drivers</em>, and <em>encoders</em> to ensure mechanical stability and
          ease of maintenance. The design was optimized for laser-cut acrylic platforms
          and 3D-printed parts, balancing light weight and rigidity.
        </p>

        <h2>Electronic and Control System</h2>
        <p>
          The electronic system was based on a <strong>Raspberry Pi Pico</strong>, responsible
          for the control of two <strong>DC micro gear motors</strong> through a
          <strong>L298N dual H-bridge driver</strong>. PWM signals controlled the speed of
          each wheel, while digital outputs defined the direction of rotation.
          Magnetic <strong>encoders</strong> were implemented on each motor shaft to provide
          real-time feedback of wheel velocity and direction, enabling closed-loop motion control.
        </p>

        <p>
          A <strong>Raspberry Pi 4B</strong> acted as the main processing unit, handling
          communication and higher level control through <strong>ROS2 (Robot Operating System 2)</strong>.
          The system architecture allowed the robot to receive navigation goals via Wi-Fi
          and move from a <strong>Point A</strong> to a <strong>Point B</strong>
          autonomously, both in simulation and in the physical prototype.
        </p>

        <h2>Virtual Model and Simulation in ROS2</h2>
        <p>
          A <strong>digital twin</strong> of the robot was created in ROS2 using
          <em>URDF</em> (Unified Robot Description Format) and <em>Gazebo</em> simulation.
          The model replicated the robot‚Äôs physical parameters, wheel radius, track width,
          and mass distribution, to ensure dynamic consistency with the real system.
        </p>

        <p>
          Navigation tasks were developed using ROS2 packages for odometry, TF transformations,
          and velocity control. The robot successfully simulated differential kinematics
          in Gazebo and executed autonomous navigation from start to goal points, validating
          the real-world motion planning.
        </p>

        <div class="code-block">
          <pre><code>
v = (v_r + v_l) / 2
œâ = (v_r - v_l) / L
x' = v * cos(Œ∏)
y' = v * sin(Œ∏)
Œ∏' = œâ
          </code></pre>
        </div>

        <p>
          These equations describe the <strong>differential kinematic model</strong> used
          in both the ROS2 simulation and the control implemented on the Raspberry Pi Pico.
        </p>

        <h2>Hardware Summary</h2>
        <ul>
          <li><strong>Microcontroller:</strong> Raspberry Pi Pico</li>
          <li><strong>Main Processor:</strong> Raspberry Pi 4B (2GB)</li>
          <li><strong>Driver:</strong> L298N Dual H-Bridge</li>
          <li><strong>Motors:</strong> 2 Micro DC gear motors (2‚Äì7V, 300RPM, 1.8kg¬∑cm)</li>
          <li><strong>Encoders:</strong> Magnetic encoders for feedback</li>
          <li><strong>Structure:</strong> Acrylic chassis with metal caster wheel</li>
          <li><strong>Software:</strong> Solid Edge Siemens, ROS2, Gazebo</li>
        </ul>

        <h2>Assembly Process</h2>
        <p>
          The robot‚Äôs assembly included 3D printing the upper cover, laser cutting the chassis,
          and machining brass spacers for mechanical reinforcement. After verifying
          each electronic connection on a breadboard, the circuit was soldered and integrated
          into the structure. The final result was a fully functional robot capable of
          differential movement and autonomous navigation.
        </p>

        <h2>Highlights</h2>
        <ul>
          <li>Integration of mechanical and electronic design into a single robotic platform</li>
          <li>ROS2-based digital twin for real and simulated testing</li>
          <li>Closed-loop velocity control using encoder feedback</li>
          <li>Precise movement from point A to point B in both simulation and reality</li>
        </ul>

        <!-- üîπ PROJECT GALLERY -->
<h2>Project Gallery</h2>

<div class="gallery-container">
  <div class="gallery-slider">
    <!-- 16 im√°genes -->
    <img src="/projects/carro/carro1.jpeg" alt="Robot 1" class="active" />
    <img src="/projects/carro/carro2.jpeg" alt="Robot 2" />
    <img src="/projects/carro/carro3.jpeg" alt="Robot 3" />
    <img src="/projects/carro/carro4.jpeg" alt="Robot 4" />
    <img src="/projects/carro/carro5.jpeg" alt="Robot 5" />
    <img src="/projects/carro/carro6.jpeg" alt="Robot 6" />
    <img src="/projects/carro/carro7.jpeg" alt="Robot 7" />
    <img src="/projects/carro/carro8.jpeg" alt="Robot 8" />
    <img src="/projects/carro/carro9.jpeg" alt="Robot 9" />
    <img src="/projects/carro/carro10.jpeg" alt="Robot 10" />
    <img src="/projects/carro/carro11.jpeg" alt="Robot 11" />
    <img src="/projects/carro/carro12.jpeg" alt="Robot 12" />
    <img src="/projects/carro/carro13.jpeg" alt="Robot 13" />
    <img src="/projects/carro/carro14.jpeg" alt="Robot 14" />
    <img src="/projects/carro/carro15.jpeg" alt="Robot 15" />
    <img src="/projects/carro/carro16.jpeg" alt="Robot 16" />
  </div>

  <button class="gallery-btn prev">‚ùÆ</button>
  <button class="gallery-btn next">‚ùØ</button>
</div>

<!-- üîπ Lightbox (Zoom / Fullscreen) -->
<div id="lightbox" class="lightbox">
  <button class="close">&times;</button>
  <button class="lightbox-nav prev">‚ùÆ</button>
  <button class="lightbox-nav next">‚ùØ</button>
  <img id="lightbox-img" class="lightbox-content" />
</div>

<script>
  const items = document.querySelectorAll(".gallery-slider img");
  const nextBtn = document.querySelector(".gallery-btn.next");
  const prevBtn = document.querySelector(".gallery-btn.prev");
  let index = 0;

  const showItem = (i) => {
    items.forEach((item) => item.classList.remove("active"));
    items[i].classList.add("active");
  };

  const nextImage = () => {
    index = (index + 1) % items.length;
    showItem(index);
  };

  const prevImage = () => {
    index = (index - 1 + items.length) % items.length;
    showItem(index);
  };

  nextBtn.addEventListener("click", nextImage);
  prevBtn.addEventListener("click", prevImage);

  // Lightbox
  const lightbox = document.getElementById("lightbox");
  const lightboxImg = document.getElementById("lightbox-img");
  const closeBtn = document.querySelector(".close");
  const nextLightbox = document.querySelector(".lightbox-nav.next");
  const prevLightbox = document.querySelector(".lightbox-nav.prev");

  const openLightbox = (i) => {
    index = i;
    lightbox.style.display = "flex";
    lightboxImg.src = items[index].src;
  };

  const updateLightbox = (direction) => {
    index = (index + direction + items.length) % items.length;
    lightboxImg.src = items[index].src;
  };

  items.forEach((item, i) => {
    item.addEventListener("click", () => openLightbox(i));
  });

  nextLightbox.addEventListener("click", () => updateLightbox(1));
  prevLightbox.addEventListener("click", () => updateLightbox(-1));

  closeBtn.addEventListener("click", () => {
    lightbox.style.display = "none";
  });

  lightbox.addEventListener("click", (e) => {
    if (e.target === lightbox) lightbox.style.display = "none";
  });

  // üîπ Navegaci√≥n con teclas del teclado
  document.addEventListener("keydown", (e) => {
    if (lightbox.style.display === "flex") {
      if (e.key === "ArrowRight") updateLightbox(1);
      if (e.key === "ArrowLeft") updateLightbox(-1);
      if (e.key === "Escape") lightbox.style.display = "none";
    } else {
      if (e.key === "ArrowRight") nextImage();
      if (e.key === "ArrowLeft") prevImage();
    }
  });
</script>

<style>
/* üîπ Gallery Base */
.gallery-container {
  position: relative;
  max-width: 850px;
  margin: 3rem auto;
  overflow: hidden;
  border-radius: 16px;
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.25);
}

.gallery-slider {
  position: relative;
  height: 500px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.gallery-slider img {
  position: absolute;
  opacity: 0;
  transition: opacity 1s ease-in-out;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 14px;
  cursor: pointer;
}

.gallery-slider img.active {
  opacity: 1;
  z-index: 1;
}

.gallery-slider img:hover {
  transform: scale(1.02);
  transition: transform 0.4s ease;
}

.gallery-btn {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.45);
  border: none;
  color: white;
  font-size: 2rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 50%;
  transition: background 0.3s;
  z-index: 5;
}

.gallery-btn:hover {
  background: rgba(0, 0, 0, 0.75);
}

.gallery-btn.prev {
  left: 10px;
}
.gallery-btn.next {
  right: 10px;
}

/* üîπ Lightbox (Fullscreen Zoom) */
.lightbox {
  display: none;
  position: fixed;
  z-index: 100;
  inset: 0;
  background: rgba(0, 0, 0, 0.9);
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.lightbox-content {
  max-width: 90%;
  max-height: 85%;
  border-radius: 12px;
  animation: fadeIn 0.4s ease;
}

.close {
  position: absolute;
  top: 25px;
  right: 35px;
  background: none;
  color: white;
  font-size: 2.5rem;
  border: none;
  cursor: pointer;
  z-index: 110;
}

.lightbox-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  color: white;
  font-size: 3rem;
  border: none;
  cursor: pointer;
  padding: 0 1rem;
  z-index: 110;
}

.lightbox-nav.prev {
  left: 25px;
}
.lightbox-nav.next {
  right: 25px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.97);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
</style>


        <section class="back-link">
          <a href="/projects">‚Üê Back to Projects</a>
        </section>
      </section>
    </main>

    <Footer />
  </body>
</html>

<style>
.project-page {
  color: var(--color-text);
  line-height: 1.7;
}

.project-hero {
  position: relative;
  height: 60vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.hero-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: brightness(50%);
}

.overlay {
  position: absolute;
  text-align: center;
  color: white;
  z-index: 2;
}

.overlay h1 {
  font-size: 2.5rem;
  font-family: var(--font-title);
  margin-bottom: 0.5rem;
}

.overlay p {
  font-size: 1.1rem;
}

.project-content {
  max-width: 900px;
  margin: 4rem auto;
  padding: 0 2rem;
}

.project-content h2 {
  color: var(--color-accent);
  margin-top: 2rem;
  margin-bottom: 0.8rem;
}

.project-content ul {
  margin-left: 1.5rem;
  list-style-type: square;
}

.code-block {
  background: rgba(0, 0, 0, 0.05);
  border-radius: 10px;
  padding: 1rem;
  overflow-x: auto;
  font-family: monospace;
  margin: 1rem 0;
}

.inline-img {
  width: 100%;
  border-radius: 10px;
  margin: 1.5rem 0;
}

.back-link {
  text-align: center;
  margin-top: 3rem;
}

.back-link a {
  color: var(--color-accent);
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.9rem;
  letter-spacing: 1px;
  transition: color 0.3s ease, transform 0.3s ease;
  text-decoration: none;
}

.back-link a:hover {
  color: var(--color-deep);
  transform: translateX(-4px);
}
</style>
